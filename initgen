#!/usr/bin/python3

###################################################################
##                    init.yml file generator                    ##
## - This script generates the init.yml for DMOJ (dmoj.ca)       ##
##   problems.                                                   ##
## - Format                                                      ##
##      - All test cases must be in a directory called `cases/`  ##
##      - Batched test cases should be in a subdirectory in      ##
##        `cases/` called `batch*/` where * is in integer.       ##
##            e.g `cases/batch1/`                                ##
##            - The test cases should be named *.in and *.out    ##
##              for input/output respectively.                   ##
##      - Pretests should be in the `cases/` directory.          ##
##           e.g `cases/0.in` for input                          ##
###################################################################

import argparse
import os
import sys

parser = argparse.ArgumentParser(description="Generates the init.yml file for DMOJ problems.")
parser.add_argument("num_batches", type=int)
parser.add_argument("problem_code", nargs="?", default=os.path.split(os.getcwd())[-1], help="The problem code. If none is provided, it uses the current directory name.")
parser.add_argument("--include-previous", "-i", action="store_const", default=0, const=1, help="Include all previous batches in the current batch.")
parser.add_argument("--no-output", "-n", action="store_const", default=0, const=1, help="Whether test cases (excluding pretests) should have an output file.")
parser.add_argument("--checker", "-c", nargs=1, help="The custom checker for the problem (if there is one).")
parser.add_argument("--pretests", "-p", nargs=1, type=int, default=[0], help="The number of pretests.")
args = parser.parse_args()

problem_code = args.problem_code
num_batches = args.num_batches
num_pretests = args.pretests
if num_pretests is not None:
    num_pretests = num_pretests[0]
include_prev = args.include_previous
no_output = args.no_output
checker = args.checker

class Batch:
    def __init__(self, case_lines, points):
        self.cases = case_lines
        self.points = points

    @property
    def batch_start(self):
        return ["- batched:"]

    @property
    def batch_cases(self):
        return self.cases

    @property
    def batch_end(self):
        return ["  points: {0}".format(self.points)]

with open("init.yml", "w") as f:
    f.write("archive: {0}.zip\n".format(problem_code))
    if checker is not None:
        checker = checker[0]
        if checker == "floats":
            print("Enter precision of checker (Default: 5):", end=" ", flush=True)
            precision = input().strip() or "5"
            output = """\
checker:
  args: {{precision: {prec}}}
  name: floats
""".format(prec=precision)
            f.write(output)
        else:
            f.write("checker: {}\n".format(checker))
    if num_pretests > 0:
        f.write("pretest_test_cases:\n")
        for i in range(num_pretests):
            f.write("- &id{0:03} {{in: cases/{0}.in, out: cases/{0}.out, points: 0}}\n".format(i))

    f.write("test_cases:\n")
    if num_pretests > 0:
        for i in range(num_pretests):
            f.write("- *id{0:03}\n".format(i))
    batches = []
    
    for i in range(num_batches):
        print("Enter batch start, batch end, number of points:", end=" ", flush=True)
        batch_start, batch_end, number_points = map(int, sys.stdin.readline().strip().split())
        cases = []
        for j in range(batch_start, batch_end+1):
            format_str = "  - {{in: cases/batch{0}/{1}.in, out: cases/batch{0}/{1}.out}}"
            if no_output:
                format_str = "  - {{in: cases/batch{0}/{1}.in}}"
            cases.append(format_str.format(i+1, j))
        batches.append(Batch(cases, number_points))

    for i in range(num_batches):
        cur = batches[i]
        f.write("\n".join(cur.batch_start) + "\n")
        f.write("\n".join(cur.batch_cases) + "\n")
        if include_prev:
            for j in range(i):
                f.write("\n".join(batches[j].batch_cases) + "\n")
        f.write("\n".join(cur.batch_end) + "\n")
