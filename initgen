#!/usr/bin/python3

###################################################################
##                    init.yml file generator                    ##
## - This script generates the init.yml for DMOJ (dmoj.ca)       ##
##   problems.                                                   ##
## - Format                                                      ##
##      - All test cases must be in a directory called `cases/`  ##
##      - Batched test cases should be in a subdirectory in      ##
##        `cases/` called `batch*/` where * is in integer.       ##
##            e.g `cases/batch1/`                                ##
##            - The test cases should be named *.in and *.out    ##
##              for input/output respectively.                   ##
##      - Pretests should be in the `cases/` directory.          ##
##           e.g `cases/0.in` for input                          ##
###################################################################

import argparse
import sys

parser = argparse.ArgumentParser(description="Generates the init.yml file for DMOJ problems.")
parser.add_argument("problem_code")
parser.add_argument("num_batches", type=int)
parser.add_argument("--include-previous", "-i", action="store_const", default=0, const=1, help="Include all previous batches in the current batch.")
parser.add_argument("--checker", "-c", nargs=1, help="The custom checker for the problem (if there is one).")
parser.add_argument("--pretests", "-p", nargs=1, type=int, default=0, help="The number of pretests.")
args = parser.parse_args()

problem_code = args.problem_code
num_batches = args.num_batches
num_pretests = args.pretests
if num_pretests is not None:
    num_pretests = num_pretests[0]
include_prev = args.include_previous
checker = args.checker

with open("init.yml", "w") as f:
    f.write("archive: {0}.zip\n".format(problem_code))
    if checker is not None:
        f.write("checker: {}\n".format(checker[0]))
    if num_pretests is not None:
        f.write("pretest_test_cases:\n")
        for i in range(num_pretests):
            f.write("- &id{0:03} {{in: cases/{0}.in, out: cases/{0}.out, points: 0}}\n".format(i))

    f.write("test_cases:\n")
    if num_pretests is not None:
        for i in range(num_pretests):
            f.write("- *id{0:03}\n".format(i))
    previous = []
    for i in range(num_batches):
        print("Enter batch start, batch end, number of points:", end=" ", flush=True)
        batch_start, batch_end, number_points = map(int, sys.stdin.readline().split())
        f.write("- batched:\n")
        if include_prev:
            for x in previous:
                f.write(x)
        
        for j in range(batch_start, batch_end+1):
            line = "  - {{in: cases/batch{0}/{1}.in, out: cases/batch{0}/{1}.out}}\n".format(i+1, j)
            f.write(line)
            if include_prev:
                previous.append(line)
        f.write("  points: {0}\n".format(number_points))
